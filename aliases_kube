# View the local config file as json
# k config view -o json
#
# kubectl auth can-i get po -A --as=hacker@bad.com

alias k="kubectl "
alias kx="kubectl --context=x"
alias kt='kubetail'

alias kc="kubectl config use-context"
alias ksys="kubectl --namespace=kube-system"
alias kcd="kubectl config use-context"
alias kcdn='kubectl config set-context --current --namespace '
alias kls='kubectl config get-contexts -o name | egrep --color=always "$(k config current-context)|^"'
alias kpwd='kubectl config get-contexts $(k config current-context)'
alias kall='kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n'

# https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-instances.html#listing-instances
# 
# instances that have the tag Name=MyInstance.
# aws ec2 describe-instances --filters "Name=tag:Name,Values=MyInstance"
#
# instances that were launched using any of the following AMIs: ami-x0123456, ami-y0123456, and ami-z0123456
# aws ec2 describe-instances --filters "Name=image-id,Values=ami-x0123456,ami-y0123456,ami-z0123456"

alias alist="aws ec2 describe-instances"
alias glist="gcloud compute instances list"

# azure: az vm list | jq '.[] | (.location + " " + .name)'

alias k_rest="k get po -A | awk '\$5>0'"
alias k_fail='k get po -A  --field-selector="status.phase!=Succeeded,status.phase!=Running" '

function az_vaults() {
    az keyvault list | jq -r '.[] | "\(.location) - \(.name)"'
}

function az_ls() {
    az account list | jq -r '.[] | .name'
}

function az_pwd() {
    az account show | jq -r '(.name), (.user.name), (.state)' | paste -sd'|' -
}

function az_cd() {
    if [ -z "$1" ]; then
        echo "No subscription supplied"
        echo "Valid values: "
        az_ls
        return 1
    fi

    az account set --subscription $1
    az_pwd
}


function az_clusters() {
    az aks list | jq -r '.[]|"Cluster: \(.name) Resource-group: \(.resourceGroup) Enabled: \(.enableRbac) "' | column -t
}

