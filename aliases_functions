
# Do: yml as json
#   cat config.yml | yq -oj
#
# Do: extract json keys
#   cat keys.json | jq -r 'to_entries[] | (.key + ": ")'

# ec2 instances info
# aws ec2 describe-instances | jq '.Reservations[].Instances[] | "\(.InstanceId) \(.KeyName) \(.Platform) \(.InstanceType) PrivateIP:\(.PrivateIpAddress) \(.State.Name)"' | grep running

function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

# https://stackoverflow.com/questions/44521071/how-to-view-full-dependency-tree-for-nested-go-dependencies
# % go list -f '{{ .Imports }}' github.com/davecheney/profile
# [io/ioutil log os os/signal path/filepath runtime runtime/pprof]
# % go list -f '{{ .Deps }}' github.com/davecheney/profile
# [bufio bytes errors fmt io io/ioutil log math os os/signal path/filepath reflect run

camel() {
    # perl -pe 's#(_|^)(.)#\u$2#g'
    gsed 's/_\([a-z]\)/\U\1/g'
}

camel2() {
    # https://codereview.stackexchange.com/questions/138228/transform-snake-case-to-camelcase-with-sed 
    # two steps _a-z -> Az + first uppercase
    gsed 's/_\([a-z]\)/\U\1/g;s/^./\U&/'
}



function snake {
    perl -pe 's#([A-Z])#_\L$1#g' | perl -pe 's#^_##'
}


function watcha() {
    watch --color -x zsh -ic $1
}

function xml_lint() {
    # https://stackoverflow.com/questions/16090869/how-to-pretty-print-xml-from-the-command-line
    # brew install xmlstarlet
    #
    # xmlstarlet format --indent-tab
    xmlstarlet format $1
}

function psls() {
    # https://stackoverflow.com/questions/2013547/assigning-default-values-to-shell-variables-with-a-single-command-in-bash 
    # FOO="${VARIABLE:-default}"  # If variable not set or null, use default.
    # if [ -z "$1" ]; then
    DEFAULT=$USERNAME
    NEEDLE="${1:-$DEFAULT}"  # If variable not set or null, use default.

    ps -ef | grep -e "$NEEDLE" | grep -v grep
}

function ps_node() {
    # pgrep -lf node
    pgrep -l node
}

function mongo_local() {
    docker exec -it mongodb bash -c '/usr/bin/mongosh -u admin -p password'
}

# https://www.reddit.com/r/MacOS/comments/zq36l1/whats_up_with_mdfind_warning_on_console/
function mdfind() {
    /usr/bin/mdfind $@ 2> >(grep --invert-match ' \[UserQueryParser\] ' >&2)
}

# https://prefetch.net/blog/2020/07/14/decoding-json-web-tokens-jwts-from-the-linux-command-line/
function jwtd() {
    # if [[ -x $(command -v jq) ]]; then
    jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}"
    # jq 'split(".") | .[1]' <<< "${1}" | grep -v null  | jq -R '@base64d | fromjson'
}

function jwtdf() {
    cat $1 | jq -R 'split(".") | .[1] | @base64d | fromjson'
}


function jwtd_full() {
    if [[ -x $(command -v jq) ]]; then
         # jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
         jq -R 'split(".") | .[0] | @base64d | fromjson' <<< "${1}"
         jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}"
         echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
    fi
}

# https://coderwall.com/p/yw96rg/display-all-commands-offered-by-your-installed-oh-my-zsh-plugins
function options() {
    PLUGIN_PATH="$HOME/.oh-my-zsh/plugins/"
    for plugin in $plugins; do
        echo "\n\nPlugin: $plugin"; grep -r "^function \w*" $PLUGIN_PATH$plugin | awk '{print $2}' | sed 's/()//'| tr '\n' ', '; grep -r "^alias" $PLUGIN_PATH$plugin | awk '{print $2}' | sed 's/=.*//' |  tr '\n' ', '
    done
}

function pl() {
    # print line
    # Print: line range sed -n '2,4 p' file
    awk "FNR==$1" $2
}

# find common lines file_1 file_2
function common_lines() {
    grep -F -x -f $1 $2
}

function topc() {
    # show most used commands
    # history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
    history | cut -d ' ' -f5 | sort | uniq -c | sort -nr | head -40
}



function ssl_enddate() {
    openssl x509 -enddate -noout -in $1
}

function glo() {
    git log --decorate --stat --graph --pretty=format:"%d %Cgreen%h%Creset (%ar - %Cred%an%Creset), %s%n"
}

create_exe () {
    echo "#!/bin/sh" > $1;
    echo "echo 'Running $1'" >> $1;
    chmod +x $1;
    cat $1
}


function plott() {
    # http://linux.byexamples.com/archives/474/bash-script-that-process-input-from-pipeline-or-file-redirection/
    # if [ -e $1 ]; then read str; else str=$1;fi
    FILE="$1"
    less $FILE | ~/git/data_hacks/data_hacks/bar_chart.py
}


function show() {
   # credits: http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
   list=''
   status_only=no
   show_help=no

   set -- $(getopt fh "$@")
   while [ $# -gt 0 ]
      do
   case "$1" in
         (-f) status_only=yes;;
         (-h) show_help=yes;;
         (-c) list="$list $2"; shift;;
         (--) shift; break;;
         (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
         (*)  break;;
         esac
         shift
   done

   if [[ $# -lt 1 ]] || [[ "yes" == "$show_help" ]] ; then
      echo 'Usage: '
      echo '   show [-f file status only] [-h help] commit_index'
      return
   fi

   # validate the index
   re='^[0-9]+$'
   if ! [[ "$1" =~ $re ]]; then
      echo "The commit index must be an integer " >&2
      return
   fi

   if [[ "yes" == "$status_only" ]]; then
      git log --format='%H' -"$1" | tail -1 | xargs git show --name-status
      #git log --pretty=oneline  | nl | grep " $1\t"  |  cut  -f2 | cut -d ' ' -f1 | xargs git show --name-status
   else
      git log --format='%H' -"$1" | tail -1 | xargs git show --color
   fi
}


